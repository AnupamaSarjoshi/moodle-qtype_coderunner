{"version":3,"file":"outputdisplayarea.min.js","sources":["../src/outputdisplayarea.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more util.details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n/**\n * @module coderunner/outputdisplayarea\n * @copyright  James Napier, 2023, The University of Canterbury\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\n\nimport ajax from 'core/ajax';\nimport {get_string as getLangString} from 'core/str';\n\n\n/**\n * Get the specified language string using\n * AJAX and plug it into the given textarea\n * @param {string} langStringName The language string name.\n * @param {DOMnode} textarea The textarea into which the error message\n * should be plugged.\n * @param {string} additionalText Extra text to follow the result code.\n */\nconst setLangString = async(langStringName, textarea, additionalText) => {\n    const message = await getLangString(langStringName, 'filter_ace_inline');\n    textarea.show();\n    textarea.html(escapeHtml(\"*** \" + message + \" ***\\n\" + additionalText));\n};\n\nconst diagnoseWebserviceResponse = response => {\n    // Table of error conditions.\n    // Each row is response.error, response.result, langstring\n    // response.result is ignored if response.error is non-zero.\n    // Any condition not in the table is deemed an \"Unknown runtime error\".\n    const ERROR_RESPONSES = [\n        [1, 0, 'Sandbox access denied.'], // Sandbox AUTH_ERROR\n        [2, 0, 'error_unknown_language'], // Sandbox WRONG_LANG_ID\n        [3, 0, 'Sandbox access denied.'], // Sandbox ACCESS_DENIED\n        [4, 0, 'error_submission_limit_reached'], // Sandbox SUBMISSION_LIMIT_EXCEEDED\n        [5, 0, 'Sandbox overload. Please wait and try again later'], // Sandbox SERVER_OVERLOAD\n        [0, 11, ''], // RESULT_COMPILATION_ERROR\n        [0, 12, 'Scratchpad crashed. Out of memory, perhaps?'], // RESULT_RUNTIME_ERROR (supervisor process broke)\n        [0, 13, 'Scratchpad time limit error. Please report'], // RESULT TIME_LIMIT (supervisor process broke)\n        [0, 15, ''], // RESULT_SUCCESS\n        [0, 17, 'Scratchpad memory limit error. Please report'], // RESULT_MEMORY_LIMIT\n        [0, 21, 'Sandbox overload. Please wait and try again later'], // RESULT_SERVER_OVERLOAD\n        [0, 30, 'Excessive output.'] // RESULT OUTPUT_LIMIT\n    ];\n    for (let i = 0; i < ERROR_RESPONSES.length; i++) {\n        let row = ERROR_RESPONSES[i];\n        if (row[0] == response.error && (response.error != 0 || response.result == row[1])) {\n            return row[2];\n        }\n    }\n    return 'error_unknown_runtime'; // We're dead, Fred.\n};\n\nconst getImage = base64 => {\n    let image = $(`<img src=\"data:image/png;base64,${base64}\">`);\n    return image;\n};\n\n/**\n *\n */\nclass OutputDisplayArea {\n    constructor(displayAreaId, outputMode) {\n        this.displayAreaId = displayAreaId;\n        this.displayArea = document.getElementById(displayAreaId);\n        this.textDisplay = document.getElementById(displayAreaId + '-text');\n        this.htmlDisplay = document.getElementById(displayAreaId + '-html');\n        this.imageDisplay = document.getElementById(displayAreaId + '-images');\n        this.mode = outputMode;\n        this.stdIn = [];\n    }\n\n    clearDisplay() {\n        this.textDisplay.innerHTML = \"\";\n        this.htmlDisplay.innerHTML = \"\";\n        this.imageDisplay.innerHTML = \"\";\n    }\n\n    displayText(response) {\n        const output = response.output;\n        const error = response.stderr;\n        this.textDisplay.innerText = output + error;\n    }\n\n    displayHtml(response) {\n        const output = response.output;\n        const error = response.stderr;\n        this.textDisplay.innerHTML = output + error;\n    }\n\n    displayNoOutput(response) {\n        const isNoOutput = response.output === '' && response.stderr === '';\n        if (isNoOutput) {\n            this.textDisplay.innerHTML = '<span style=\"color:red\">&lt; No output! &gt;</span>';\n        }\n        return isNoOutput;\n    }\n\n    display(response) {\n        if (this.displayNoOutput(response)) {\n            return;\n        }\n        if (this.mode === 'json') {\n            // TODO: error handling.\n            const json = JSON.parse(response);\n            this.displayJson(json);\n        } else if (this.mode === 'html') {\n            this.displayHtml(response);\n        } else if (this.mode === 'text') {\n            const text = response;\n            this.displayText(text);\n        } else {\n            throw Error(`Invalid outputMode given: \"${this.mode}\"`);\n        }\n    }\n\n    async handleRunButtonClick(code, lang, sandboxParams) {\n        this.clearDisplay();\n        ajax.call([{\n            methodname: 'qtype_coderunner_run_in_sandbox',\n            args: {\n                contextid: M.cfg.contextid, // Moodle context ID\n                sourcecode: code,\n                language: lang,\n                params: JSON.stringify(sandboxParams) // Sandbox params\n            },\n            done: (responseJson) => {\n                // TODO: error handling.\n                const response = JSON.parse(responseJson);\n                // Const error = diagnoseWebserviceResponse(response);\n                this.display(response);\n            },\n            fail: (error) => {\n                alert(error.message);\n            }\n        }]);\n    }\n\n    displayJson(json) {\n        var result = json;\n        var text = result.stdout;\n\n        if (result.returncode !== 42) {\n            text += result.stderr;\n        }\n        if (result.returncode == 13) { // Timeout\n            text += \"\\n*** Timeout error ***\\n\";\n        }\n\n        var numImages = 0;\n        if (result.files) {\n            $(this.imageDisplay).empty();\n            for (var prop in result.files) {\n                var image = getImage(result.files[prop]);\n                $(this.imageDisplay).append(image);\n                numImages += 1;\n            }\n        }\n\n        if (text.trim() === '' && result.returncode !== 42) {\n            if (numImages == 0) {\n                $(this.textDisplay).html('<span style=\"color:red\">&lt; No output! &gt;</span>');\n            }\n        } else {\n            $(this.textDisplay).text(text);\n        }\n\n        if (result.returncode === 42) {\n            var inputId = `${this.displayAreaId}-input-field`;\n            $(this.textDisplay).html($(this.textDisplay).html() + `<input type=\"text\" id=\"${inputId}\">`);\n            var inputEl = $(document.getElementById(inputId));\n            inputEl.focus();\n\n            inputEl.on('keyup', (e) => {\n                if (e.keyCode === 13) {\n                    const line = inputEl.val();\n                    inputEl.remove();\n                    $(this.textDisplay).html($(this.textDisplay).html() + line);\n                    this.handleRunButtonClick();\n                }\n            });\n        }\n    }\n}\n\nexport {\n    OutputDisplayArea\n};\n"],"names":["langStringName","textarea","additionalText","message","show","html","escapeHtml","OutputDisplayArea","displayAreaId","outputMode","displayArea","document","getElementById","textDisplay","htmlDisplay","imageDisplay","mode","stdIn","innerHTML","response","output","error","stderr","innerText","isNoOutput","this","displayNoOutput","json","JSON","parse","displayJson","displayHtml","Error","text","displayText","code","lang","sandboxParams","clearDisplay","call","methodname","args","contextid","M","cfg","sourcecode","language","params","stringify","done","responseJson","_this","display","fail","alert","result","stdout","returncode","base64","numImages","files","prop","empty","image","append","trim","inputId","inputEl","focus","on","e","keyCode","line","val","remove","_this2","handleRunButtonClick"],"mappings":"2uCAkCsB,iBAAMA,eAAgBC,SAAUC,yJAC5B,mBAAcF,eAAgB,4BAA9CG,sBACNF,SAASG,OACTH,SAASI,KAAKC,WAAW,OAASH,QAAU,SAAWD,kFAuCrDK,wDACUC,cAAeC,yKAClBD,cAAgBA,mBAChBE,YAAcC,SAASC,eAAeJ,oBACtCK,YAAcF,SAASC,eAAeJ,cAAgB,cACtDM,YAAcH,SAASC,eAAeJ,cAAgB,cACtDO,aAAeJ,SAASC,eAAeJ,cAAgB,gBACvDQ,KAAOP,gBACPQ,MAAQ,2IAGjB,gBACSJ,YAAYK,UAAY,QACxBJ,YAAYI,UAAY,QACxBH,aAAaG,UAAY,8BAGlC,SAAYC,cACFC,OAASD,SAASC,OAClBC,MAAQF,SAASG,YAClBT,YAAYU,UAAYH,OAASC,iCAG1C,SAAYF,cACFC,OAASD,SAASC,OAClBC,MAAQF,SAASG,YAClBT,YAAYK,UAAYE,OAASC,qCAG1C,SAAgBF,cACNK,WAAiC,KAApBL,SAASC,QAAqC,KAApBD,SAASG,cAClDE,kBACKX,YAAYK,UAAY,uDAE1BM,kCAGX,SAAQL,cACAM,KAAKC,gBAAgBP,aAGP,SAAdM,KAAKT,KAAiB,KAEhBW,KAAOC,KAAKC,MAAMV,eACnBW,YAAYH,WACd,GAAkB,SAAdF,KAAKT,UACPe,YAAYZ,cACd,CAAA,GAAkB,SAAdM,KAAKT,WAINgB,2CAAoCP,KAAKT,eAHzCiB,KAAOd,cACRe,YAAYD,6GAMzB,kBAA2BE,KAAMC,KAAMC,2IAC9BC,6BACAC,KAAK,CAAC,CACPC,WAAY,kCACZC,KAAM,CACFC,UAAWC,EAAEC,IAAIF,UACjBG,WAAYV,KACZW,SAAUV,KACVW,OAAQnB,KAAKoB,UAAUX,gBAE3BY,KAAM,SAACC,kBAEG/B,SAAWS,KAAKC,MAAMqB,cAE5BC,MAAKC,QAAQjC,WAEjBkC,KAAM,SAAChC,OACHiC,MAAMjC,MAAMlB,iLAKxB,SAAYwB,sBACJ4B,OAAS5B,KACTM,KAAOsB,OAAOC,OAEQ,KAAtBD,OAAOE,aACPxB,MAAQsB,OAAOjC,QAEM,IAArBiC,OAAOE,aACPxB,MAAQ,iCA7FHyB,OAgGLC,UAAY,KACZJ,OAAOK,UAEF,IAAIC,2BADPpC,KAAKV,cAAc+C,QACJP,OAAOK,MAAO,KACvBG,OApGHL,OAoGoBH,OAAOK,MAAMC,OAnGlC,6DAAqCH,mCAoGnCjC,KAAKV,cAAciD,OAAOD,OAC5BJ,WAAa,KAID,KAAhB1B,KAAKgC,QAAuC,KAAtBV,OAAOE,WACZ,GAAbE,+BACElC,KAAKZ,aAAaR,KAAK,2EAG3BoB,KAAKZ,aAAaoB,KAAKA,MAGH,KAAtBsB,OAAOE,WAAmB,KACtBS,kBAAazC,KAAKjB,kDACpBiB,KAAKZ,aAAaR,MAAK,mBAAEoB,KAAKZ,aAAaR,wCAAmC6D,mBAC5EC,SAAU,mBAAExD,SAASC,eAAesD,UACxCC,QAAQC,QAERD,QAAQE,GAAG,SAAS,SAACC,MACC,KAAdA,EAAEC,QAAgB,KACZC,KAAOL,QAAQM,MACrBN,QAAQO,6BACNC,OAAK9D,aAAaR,MAAK,mBAAEsE,OAAK9D,aAAaR,OAASmE,MACtDG,OAAKC"}