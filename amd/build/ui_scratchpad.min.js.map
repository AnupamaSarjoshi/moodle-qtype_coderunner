{"version":3,"file":"ui_scratchpad.min.js","sources":["../src/ui_scratchpad.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more util.details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Implementation of the html_ui user interface plugin. For overall details\n * of the UI plugin architecture, see userinterfacewrapper.js.\n *\n * This plugin replaces the usual textarea answer element with a div\n * containing the author-supplied HTML. The serialisation of that HTML,\n * which is what is essentially copied back into the textarea for submissions\n * as the answer, is a JSON object. The fields of that object are the names\n * of all author-supplied HTML elements with a class 'coderunner-ui-element';\n * all such objects are expected to have a 'name' attribute as well. The\n * associated field values are lists. Each list contains all the values, in\n * document order, of the results of calling the jquery val() method in turn\n * on each of the UI elements with that name.\n * This means that at least input, select and textarea\n * elements are supported. The author is responsible for checking the\n * compatibility of other elements with jquery's val() method.\n *\n * The HTML to use in the answer area must be provided as the contents of\n * either the globalextra field or the prototypeextra field in the question\n * authoring form. The choice of which is set by the html_src UI parameter, which\n * must be either 'globalextra' or 'prototypeextra'.\n *\n * If any fields of the answer html are to be preloaded, these should be specified\n * in the answer preload with json of the form '{\"<fieldName>\": \"<fieldValueList>\",...}'\n * where fieldValueList is a list of all the values to be assigned to the fields\n * with the given name, in document order.\n *\n * To accommodate the possibility of dynamic HTML, any leftover preload values,\n * that is, values that cannot be positioned within the HTML either because\n * there is no field of the required name or because, in the case of a list,\n * there are insufficient elements, are assigned to the data['leftovers']\n * attribute of the outer html div, as a sub-object of the original object.\n * This outer div can be located as the 'closest' (in a jQuery sense)\n * div.qtype-coderunner-html-outer-div. The author-supplied HTML must include\n * JavaScript to make use of the 'leftovers'.\n *\n * As a special case of the serialisation, if all values in the serialisation\n * are either empty strings or a list of empty strings, the serialisation is\n * itself the empty string.\n *\n * @module coderunner/ui_html\n * @copyright  Richard Lobb, 2022, The University of Canterbury\n * @copyright  James Napier, 2022, The University of Canterbury\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport ajax from 'core/ajax';\nimport {get_string as getLangString} from 'core/str';\nimport Templates from 'core/templates';\n\nimport {newUiWrapper} from 'qtype_coderunner/userinterfacewrapper';\n\n\nconst RESULT_SUCCESS = 15; // Code for a correct Jobe run.\nconst DEFAULT_MAX_OUTPUT_LEN = 30000;\n\n\n/**\n * Escape text special HTML characters.\n * @param {string} text\n * @returns {string} text with various special chars replaced with equivalent\n * html entities. Newlines are replaced with <br>.\n */\nconst escapeHtml = text => {\n    const map = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#039;'\n    };\n    return text.replace(/[&<>\"']/g, function(m) {\n        return map[m];\n    });\n};\n\n/**\n * Analyse the response for errors. There are two sorts of error: sandbox failures,\n * for which the field response.error is non-zero meaning the run didn't take\n * place at all and failures in the run\n * itself, such as compile errors, timeouts, runtime errors etc. The\n * various codes are documented in the CodeRunner file sandbox.php.\n * Some error returns, notably compilation error and runtime error, are not\n * treated as errors here, since the stdout + stderr should reveal what\n * happened anyway. More obscure errors are lumped together as 'Unknown\n * runtime error'.\n * @param {object} response The response from the web-service sandbox request.\n * @returns string The language string to use for an error message or '' if\n * no error message.\n */\nconst diagnose = response => {\n    // Table of error conditions.\n    // Each row is response.error, response.result, langstring\n    // response.result is ignored if response.error is non-zero.\n    // Any condition not in the table is deemed an \"Unknown runtime error\".\n    const ERROR_RESPONSES = [\n        [1, 0, 'error_access_denied'], // Sandbox AUTH_ERROR\n        [2, 0, 'error_unknown_language'], // Sandbox WRONG_LANG_ID\n        [3, 0, 'error_access_denied'], // Sandbox ACCESS_DENIED\n        [4, 0, 'error_submission_limit_reached'], // Sandbox SUBMISSION_LIMIT_EXCEEDED\n        [5, 0, 'error_sandbox_server_overload'], // Sandbox SERVER_OVERLOAD\n        [0, 11, ''], // RESULT_COMPILATION_ERROR\n        [0, 12, ''], // RESULT_RUNTIME_ERROR\n        [0, 13, 'error_timeout'], // RESULT TIME_LIMIT\n        [0, RESULT_SUCCESS, ''], // RESULT_SUCCESS\n        [0, 17, 'error_memory_limit'], // RESULT_MEMORY_LIMIT\n        [0, 21, 'error_sandbox_server_overload'], // RESULT_SERVER_OVERLOAD\n        [0, 30, 'error_excessive_output'] // RESULT OUTPUT_LIMIT\n    ];\n    for (const row of ERROR_RESPONSES) {\n        if (row[0] == response.error && (response.error != 0 || response.result == row[1])) {\n            return row[2];\n        }\n    }\n    return 'error_unknown_runtime';\n};\n\n/**\n * Get the specified language string using\n * AJAX and plug it into the given textarea\n * @param {string} langStringName The language string name.\n * @param {DOMnode} textarea The textarea into which the error message\n * should be plugged.\n * @param {string} additionalText Extra text to follow the result code.\n */\nconst setLangString = async(langStringName, textarea, additionalText) => {\n    const message = await getLangString(langStringName, 'filter_ace_inline');\n    textarea.show();\n    textarea.html(escapeHtml(\"*** \" + message + \" ***\\n\" + additionalText));\n};\n\n/**\n * Concatenates the cmpinfo, stdout and stderr fields of the sandbox\n * response, truncating both stdout and stderr to a given maximum length\n * if necessary (in which case '... (truncated)' is appended.\n * @param {object} response Sandbox response object\n * @param {int} maxLen The maximum length of the trimmed stringlen.\n */\nconst combinedOutput = (response, maxLen) => {\n    const limit = s => s.length <= maxLen ? s : s.substr(0, maxLen) + '... (truncated)';\n    return response.cmpinfo + limit(response.output) + limit(response.stderr);\n};\n\n/**\n * Invert serialisation from '1' to '', vice versa.\n * @param {string} current serialisation.\n * @returns {string} inverted serialisation.\n */\nconst invertSerial = current => current[0] == '1' ? [''] : ['1'];\n\n/**\n * Insert the answer code and test code into the wrapper. This may\n * defined by the user, in UI Params or globalextra. If prefixAns is\n * false: do not include answerCode in final wrapper.\n * @param {string} answerCode text.\n * @param {string} testCode text.\n * @param {string} prefixAns '1' for true, '' for false.\n * @param {string} template provided in UI Params or globalextra.\n * @returns {string} filled template.\n */\nconst fillWrapper = (answerCode, testCode, prefixAns, template) => {\n    if (!template) {\n        template = '{{ ANSWER_CODE }}\\n' +\n                '{{ SCRATCHPAD_CODE }}';\n    }\n    if (!prefixAns) {\n        answerCode = '';\n    }\n    template = template.replaceAll('{{ ANSWER_CODE }}', answerCode);\n    template = template.replaceAll('{{ SCRATCHPAD_CODE }}', testCode);\n    return template;\n};\n\n/**\n * Returns anew object containg default values. If a matching key exists in\n * prescribed, the corresponding value from prescribed will replace the defualt value.\n * Does not add keys/values to the result if that key is not in defualts.\n * @param {object} defaults object with values to be overwritten.\n * @param {object} prescribed settings, typically set by a user.\n * @returns {object} filled with defualt values, overwritten by their prescribed value (iff included).\n */\nconst overwriteValues = (defaults, prescribed) => {\n    let overwritten = {...defaults};\n    if (prescribed) {\n        for (const [key, value] of Object.entries(defaults)) {\n            overwritten[key] = prescribed[key] || value;\n        }\n    }\n    return overwritten;\n};\n\n\n/**\n * Is an element currently hidden?\n * @param {Element} el to check visibility of.\n * @returns {boolean} true if el is visible.\n */\nconst isVisible = (el) => {\n    const styles = window.getComputedStyle(el);\n    return styles.display === 'none' || styles.visibility === 'hidden';\n};\n\n/**\n * Constructor for the ScratchpadUi object.\n * @param {string} textAreaId The ID of the html textarea.\n * @param {int} width The width in pixels of the textarea.\n * @param {int} height The height in pixels of the textarea.\n * @param {object} uiParams The UI parameter object.\n */\nclass ScratchpadUi {\n    constructor(textAreaId, width, height, uiParams) {\n        const DEF_UI_PARAMS = {\n            scratchpad_name: '',\n            button_name: '',\n            prefix_name: '',\n            help_text: '',\n            run_lang: uiParams.lang, // Use answer's ace language if not specified.\n            html_output: false,\n            disable_scratchpad: false,\n            wrapper_src: null\n        };\n\n        this.textArea = document.getElementById(textAreaId);\n        this.textAreaId = textAreaId;\n        this.height = height;\n        this.readOnly = this.textArea.readonly;\n        this.fail = false;\n\n        this.lang = uiParams.lang;\n\n        uiParams.num_rows = this.textArea.readOnly;\n        this.uiParams = overwriteValues(DEF_UI_PARAMS, uiParams);\n\n        // Find the run wrapper source location.\n        this.runWrapper = null;\n        const wrapperSrc = this.uiParams.wrapper_src;\n        if (wrapperSrc) {\n            if (wrapperSrc === 'globalextra' || wrapperSrc === 'prototypeextra') {\n                this.runWrapper = this.textArea.dataset[wrapperSrc];\n            } else {\n                // TODO: raise some sort of exception? Invalid, params.\n                //  Bad wrapper src provided by user...\n                this.runWrapper = null;\n            }\n        }\n\n        this.outerDiv = null; // TODO: Investigate...\n        this.scratchpadDiv = null;\n        this.reload(); // Draw my beautiful blobs.\n    }\n\n    failed() {\n        return this.fail;\n    }\n\n    failMessage() {\n        return this.failString;\n    }\n\n    sync() {\n        if (!this.context) {\n            return;\n        }\n        const prefixAns = document.getElementById(this.context.prefix_ans.id);\n        const showHide = document.getElementById(this.context.show_hide.id);\n\n        let serialisation = {\n            answer_code: [''],\n            test_code: [''],\n            show_hide: [''],\n            prefix_ans: ['']\n        };\n        if (this.answerTextarea) {\n            serialisation.answer_code = [this.answerTextarea.value];\n        }\n        if (this.testTextarea) {\n            serialisation.test_code = [this.testTextarea.value];\n        }\n        if (!isVisible(showHide)) {\n            serialisation.show_hide = ['1'];\n        }\n        if (prefixAns?.checked) {\n            serialisation.prefix_ans = ['1'];\n        }\n\n        serialisation.prefix_ans = invertSerial(serialisation.prefix_ans);\n        if (Object.values(serialisation).some((val) => val.length === 1 && val[0].length > 0)) {\n            serialisation.prefix_ans = invertSerial(serialisation.prefix_ans);\n            this.textArea.value = JSON.stringify(serialisation);\n        } else {\n            this.textArea.value = ''; // All fields empty...\n        }\n    }\n\n    getElement() {\n        return this.outerDiv;\n    }\n\n    async handleRunButtonClick(ajax, outputDisplayArea) {\n        outputDisplayArea = $(outputDisplayArea);\n        this.sync(); // Use up-to-date serialization.\n\n        const htmlOutput = this.uiParams.html_output;\n        const maxLen = this.uiParams['max-output-length'] || DEFAULT_MAX_OUTPUT_LEN;\n        const preloadString = $(this.textArea).val();\n        const serial = this.serialize(preloadString);\n        const params = this.uiParams.params;\n        const code = fillWrapper(\n                serial.answer_code,\n                serial.test_code,\n                serial.prefix_ans[0],\n                this.runWrapper\n                );\n\n        // Clear all output areas.\n        outputDisplayArea.html('');\n        if (htmlOutput) {\n            outputDisplayArea.hide();\n        }\n        outputDisplayArea.next('div.filter-ace-inline-html').remove(); // TODO: Naming\n\n\n        ajax.call([{\n                methodname: 'qtype_coderunner_run_in_sandbox',\n                args: {\n                    contextid: M.cfg.contextid, // Moodle context ID\n                    sourcecode: code,\n                    language: this.uiParams.run_lang,\n                    params: JSON.stringify(params) // Sandbox params\n                },\n                done: function(responseJson) {\n                    const response = JSON.parse(responseJson);\n                    const error = diagnose(response);\n                    if (error === '') {\n                        // If no errors or compilation error or runtime error\n                        if (!htmlOutput || response.result !== RESULT_SUCCESS) {\n                            // Either it's not HTML output or it is but we have compilation or runtime errors.\n                            const text = combinedOutput(response, maxLen);\n                            outputDisplayArea.show();\n                            if (text.trim() === '') {\n                                outputDisplayArea.html('<span style=\"color:red\">< No output! ></span>');\n                            } else {\n                                outputDisplayArea.html(escapeHtml(text));\n                            }\n                        } else { // Valid HTML output - just plug in the raw html to the DOM.\n                            // Repeat the deletion of previous output in case of multiple button clicks.\n                            outputDisplayArea.next('div.filter-ace-inline-html').remove();\n\n                            const html = $(\"<div class='filter-ace-inline-html '\" +\n                                    \"style='background-color:#eff;padding:5px;'>\" +\n                                    response.output + \"</div>\");\n                            outputDisplayArea.after(html);\n                        }\n                    } else {\n                        // If an error occurs, display the language string in the\n                        // outputDisplayArea plus additional info.\n                        let extra = response.error == 0 ? combinedOutput(response, maxLen) : '';\n                        if (error === 'error_unknown_runtime') {\n                            extra += response.error ? '(Sandbox error code ' + response.error + ')' :\n                                    '(Run result: ' + response.result + ')';\n                        }\n                        setLangString(error, outputDisplayArea, extra);\n                    }\n                },\n                fail: function(error) {\n                    alert(error.message);\n                }\n            }]);\n    }\n\n    updateContext(preload) {\n        this.context = {\n            \"id\": this.textAreaId,\n            \"disable_scratchpad\": this.uiParams.disable_scratchpad,\n            \"scratchpad_name\": this.uiParams.scratchpad_name,\n            \"button_name\": this.uiParams.button_name,\n            \"prefix_name\": this.uiParams.prefix_name,\n            \"help_text\": {\"text\": this.uiParams.help_text}, // TODO: context doesnt match...\n            \"answer_code\": {\n                \"id\": this.textAreaId + '_answer-code',\n                \"text\": preload.answer_code[0],\n                \"lang\": this.lang,\n                \"rows\": this.uiParams.rows\n            },\n            \"test_code\": {\n                \"id\": this.textAreaId + '_test-code',\n                \"text\": preload.test_code[0],\n                \"lang\": this.lang,\n                \"rows\": 6\n            },\n            \"show_hide\": {\n                \"id\": this.textAreaId + '_scratchpad',\n                \"show\": preload.show_hide[0]\n            },\n            \"prefix_ans\": {\n                \"id\": this.textAreaId + '_prefix-ans',\n                \"checked\": preload.prefix_ans[0]\n            },\n            \"output_display\": {\n                \"id\": this.textAreaId + '_output-displayarea'\n            },\n            \"jquery_escape\": function() {\n                return function(text, render) {\n                    return $.escapeSelector(render(text));\n                };\n            }\n        };\n    }\n\n    serialize(preloadString) {\n        const defaultSerial = {\n            answer_code: [''],\n            test_code: [''],\n            show_hide: [''],\n            prefix_ans: ['1'] // Ticked by default!\n        };\n        let serial;\n        if (preloadString) {\n            serial = JSON.parse(preloadString);\n        }\n        serial = overwriteValues(defaultSerial, serial);\n        return serial;\n    }\n\n    async reload() {\n        const preloadString = this.textArea.value;\n        let preload;\n        try {\n            preload = this.serialize(preloadString);\n        } catch (error) {\n            this.fail = true;\n            this.failString = 'scratchpad_ui_invalidserialisation';\n            return;\n        }\n\n        this.updateContext(preload);\n\n        try {\n            const {html} = await Templates.renderForPromise('qtype_coderunner/scratchpad_ui', this.context);\n\n            const div = document.createElement('div');\n            div.innerHTML = html;\n            document.getElementById(this.textAreaId)\n                .nextSibling\n                .innerHTML = html;\n            this.answerTextarea = document.getElementById(this.context.answer_code.id);\n            this.testTextarea = document.getElementById(this.context.test_code.id);\n\n            this.answerCodeUi = newUiWrapper('ace', this.context.answer_code.id);\n            if (this.testTextarea) {\n                this.testCodeUi = newUiWrapper('ace', this.context.test_code.id);\n            }\n\n            const runButton = document.getElementById(this.textAreaId + '_run-btn');\n            const outputDisplayarea = document.getElementById(this.context.output_display.id);\n            if (runButton) {\n                runButton.addEventListener('click', () => this.handleRunButtonClick(ajax, outputDisplayarea));\n            }\n        } catch (e) {\n            this.fail = true;\n            this.failString = \"UI template failed to load.\"; // TODO: Lang-string goes here.\n        }\n\n        // No resizing the outer wrapper. Instead, resize the two sub UIs,\n        // they will expand accordingly.\n        document.getElementById(this.textAreaId + '_wrapper').style.resize = 'none';\n    }\n\n    resize() {} // Nothing to see here. Move along please.\n\n    hasFocus() {\n        let focused = false;\n        if (this.answerCodeUi?.uiInstance.hasFocus()) {\n            focused = true;\n        }\n        if (this.testCodeUi?.uiInstance.hasFocus()) {\n            focused = true;\n        }\n        return focused;\n    }\n\n    destroy() {\n        this.sync();\n        this.outerDiv?.remove();\n        this.outerDiv = null;\n    }\n}\n\n\nexport {ScratchpadUi as Constructor};\n"],"names":["escapeHtml","text","map","replace","m","combinedOutput","response","maxLen","limit","s","length","substr","cmpinfo","output","stderr","invertSerial","current","overwriteValues","defaults","prescribed","overwritten","key","value","Object","entries","constructor","textAreaId","width","height","uiParams","DEF_UI_PARAMS","scratchpad_name","button_name","prefix_name","help_text","run_lang","lang","html_output","disable_scratchpad","wrapper_src","textArea","document","getElementById","readOnly","this","readonly","fail","num_rows","runWrapper","wrapperSrc","dataset","outerDiv","scratchpadDiv","reload","failed","failMessage","failString","sync","context","prefixAns","prefix_ans","id","showHide","show_hide","serialisation","answer_code","test_code","answerTextarea","testTextarea","el","styles","window","getComputedStyle","display","visibility","isVisible","checked","values","some","val","JSON","stringify","getElement","ajax","outputDisplayArea","htmlOutput","preloadString","serial","serialize","params","code","answerCode","testCode","template","replaceAll","html","hide","next","remove","call","methodname","args","contextid","M","cfg","sourcecode","language","done","responseJson","parse","error","ERROR_RESPONSES","row","result","diagnose","after","show","trim","extra","async","langStringName","textarea","additionalText","message","setLangString","alert","updateContext","preload","rows","render","$","escapeSelector","Templates","renderForPromise","createElement","innerHTML","nextSibling","answerCodeUi","testCodeUi","runButton","outputDisplayarea","output_display","addEventListener","handleRunButtonClick","e","style","resize","hasFocus","focused","_this$answerCodeUi","uiInstance","_this$testCodeUi","destroy"],"mappings":"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"}